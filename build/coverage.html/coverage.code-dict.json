{"/home/travis/build/npmtest/node-npmtest-longjohn/test.js":"/* istanbul instrument in package npmtest_longjohn */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-longjohn/lib.npmtest_longjohn.js":"/* istanbul instrument in package npmtest_longjohn */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_longjohn = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_longjohn = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-longjohn/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-longjohn && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_longjohn */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_longjohn\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_longjohn.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_longjohn.rollup.js'] =\n            local.assetsDict['/assets.npmtest_longjohn.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_longjohn.__dirname + '/lib.npmtest_longjohn.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-longjohn/node_modules/longjohn/dist/longjohn.js":"(function() {\n  var ERROR_ID, EventEmitter, create_callsite, current_trace_error, filename, format_location, format_method, in_prepare, limit_frames, prepareStackTrace, source_map, wrap_callback, __nextDomainTick, _addListener, _listeners, _nextTick, _on, _ref, _setImmediate, _setInterval, _setTimeout;\n\n  EventEmitter = require('events').EventEmitter;\n\n  if ((_ref = EventEmitter.prototype.on) != null ? _ref['longjohn'] : void 0) {\n    return module.exports = EventEmitter.prototype.on['longjohn'];\n  }\n\n  source_map = require('source-map-support');\n\n  source_map.install();\n\n  filename = __filename;\n\n  current_trace_error = null;\n\n  in_prepare = 0;\n\n  exports.empty_frame = '---------------------------------------------';\n\n  exports.async_trace_limit = 10;\n\n  format_location = function(frame) {\n    var column, file, line;\n    if (frame.isNative()) {\n      return 'native';\n    }\n    if (frame.isEval()) {\n      return 'eval at ' + frame.getEvalOrigin();\n    }\n    file = frame.getFileName();\n    file = frame.getFileName() || '<anonymous>';\n    line = frame.getLineNumber();\n    column = frame.getColumnNumber();\n    column = column != null ? ':' + column : '';\n    line = line != null ? ':' + line : '';\n    return file + line + column;\n  };\n\n  format_method = function(frame) {\n    var function_name, method, type;\n    function_name = frame.getFunctionName();\n    if (!(frame.isToplevel() || frame.isConstructor())) {\n      method = frame.getMethodName();\n      type = frame.getTypeName();\n      if (function_name == null) {\n        return \"\" + type + \".\" + (method != null ? method : '<anonymous>');\n      }\n      if (method === function_name) {\n        return \"\" + type + \".\" + function_name;\n      }\n      \"\" + type + \".\" + function_name + \" [as \" + method + \"]\";\n    }\n    if (frame.isConstructor()) {\n      return \"new \" + (function_name != null ? function_name : '<anonymous>');\n    }\n    if (function_name != null) {\n      return function_name;\n    }\n    return null;\n  };\n\n  exports.format_stack_frame = function(frame) {\n    if (frame.getFileName() === exports.empty_frame) {\n      return exports.empty_frame;\n    }\n    return '    at ' + source_map.wrapCallSite(frame);\n  };\n\n  exports.format_stack = function(err, frames) {\n    var e, lines;\n    lines = [];\n    try {\n      lines.push(err.toString());\n    } catch (_error) {\n      e = _error;\n      console.log('Caught error in longjohn. Please report this to matt.insler@gmail.com.');\n    }\n    lines.push.apply(lines, frames.map(exports.format_stack_frame));\n    return lines.join('\\n');\n  };\n\n  create_callsite = function(location) {\n    return Object.create({\n      getFileName: function() {\n        return location;\n      },\n      getLineNumber: function() {\n        return null;\n      },\n      getFunctionName: function() {\n        return null;\n      },\n      getTypeName: function() {\n        return null;\n      },\n      getMethodName: function() {\n        return null;\n      },\n      getColumnNumber: function() {\n        return null;\n      },\n      isNative: function() {\n        return null;\n      }\n    });\n  };\n\n  prepareStackTrace = function(error, structured_stack_trace) {\n    var previous_stack, _ref1;\n    ++in_prepare;\n    if (error.__cached_trace__ == null) {\n      Object.defineProperty(error, '__cached_trace__', {\n        writable: true,\n        enumerable: false,\n        configurable: true,\n        value: structured_stack_trace.filter(function(f) {\n          return f.getFileName() !== filename;\n        })\n      });\n      if ((error.__previous__ == null) && in_prepare === 1) {\n        Object.defineProperty(error, '__previous__', {\n          writable: true,\n          enumerable: false,\n          configurable: true,\n          value: current_trace_error\n        });\n      }\n      if (error.__previous__ != null) {\n        previous_stack = prepareStackTrace(error.__previous__, error.__previous__.__stack__);\n        if ((previous_stack != null ? previous_stack.length : void 0) > 0) {\n          error.__cached_trace__.push(create_callsite(exports.empty_frame));\n          (_ref1 = error.__cached_trace__).push.apply(_ref1, previous_stack);\n        }\n      }\n    }\n    --in_prepare;\n    if (in_prepare > 0) {\n      return error.__cached_trace__;\n    }\n    return exports.format_stack(error, error.__cached_trace__);\n  };\n\n  limit_frames = function(stack) {\n    var count, previous;\n    if (exports.async_trace_limit <= 0) {\n      return;\n    }\n    count = exports.async_trace_limit - 1;\n    previous = stack;\n    while ((previous != null) && count > 1) {\n      previous = previous.__previous__;\n      --count;\n    }\n    if (previous != null) {\n      return delete previous.__previous__;\n    }\n  };\n\n  ERROR_ID = 1;\n\n  wrap_callback = function(callback, location) {\n    var new_callback, orig, trace_error;\n    orig = Error.prepareStackTrace;\n    Error.prepareStackTrace = function(x, stack) {\n      return stack;\n    };\n    trace_error = new Error();\n    Error.captureStackTrace(trace_error, arguments.callee);\n    trace_error.__stack__ = trace_error.stack;\n    Error.prepareStackTrace = orig;\n    trace_error.id = ERROR_ID++;\n    if (trace_error.stack[1]) {\n      trace_error.location = \"\" + (trace_error.stack[1].getFunctionName()) + \" (\" + (trace_error.stack[1].getFileName()) + \":\" + (trace_error.stack[1].getLineNumber()) + \")\";\n    } else {\n      trace_error.location = 'bad call_stack_location';\n    }\n    trace_error.__location__ = location;\n    trace_error.__previous__ = current_trace_error;\n    trace_error.__trace_count__ = current_trace_error != null ? current_trace_error.__trace_count__ + 1 : 1;\n    limit_frames(trace_error);\n    new_callback = function() {\n      var e;\n      current_trace_error = trace_error;\n      trace_error = null;\n      try {\n        return callback.apply(this, arguments);\n      } catch (_error) {\n        e = _error;\n        e.stack;\n        throw e;\n      } finally {\n        current_trace_error = null;\n      }\n    };\n    new_callback.listener = callback;\n    return new_callback;\n  };\n\n  _on = EventEmitter.prototype.on;\n\n  _addListener = EventEmitter.prototype.addListener;\n\n  _listeners = EventEmitter.prototype.listeners;\n\n  EventEmitter.prototype.addListener = function(event, callback) {\n    var args;\n    args = Array.prototype.slice.call(arguments);\n    args[1] = wrap_callback(callback, 'EventEmitter.addListener');\n    return _addListener.apply(this, args);\n  };\n\n  EventEmitter.prototype.on = function(event, callback) {\n    var args, g, wrap;\n    args = Array.prototype.slice.call(arguments);\n    if (callback.listener) {\n      wrap = wrap_callback(callback.listener, 'EventEmitter.once');\n      g = function() {\n        var fired;\n        this.removeListener(event, g);\n        if (!fired) {\n          fired = true;\n          return wrap.apply(this, arguments);\n        }\n      };\n      g.listener = callback.listener;\n    } else {\n      g = wrap_callback(callback, 'EventEmitter.on');\n    }\n    args[1] = g;\n    return _on.apply(this, args);\n  };\n\n  EventEmitter.prototype.listeners = function(event) {\n    var l, listeners, unwrapped, _i, _len;\n    listeners = _listeners.call(this, event);\n    unwrapped = [];\n    for (_i = 0, _len = listeners.length; _i < _len; _i++) {\n      l = listeners[_i];\n      if (l.listener) {\n        unwrapped.push(l.listener);\n      } else {\n        unwrapped.push(l);\n      }\n    }\n    return unwrapped;\n  };\n\n  Object.defineProperty(EventEmitter.prototype.on, 'longjohn', {\n    writable: true,\n    enumerable: false,\n    configurable: true,\n    value: this\n  });\n\n  _nextTick = process.nextTick;\n\n  process.nextTick = function(callback) {\n    var args;\n    args = Array.prototype.slice.call(arguments);\n    args[0] = wrap_callback(callback, 'process.nextTick');\n    return _nextTick.apply(this, args);\n  };\n\n  __nextDomainTick = process._nextDomainTick;\n\n  process._nextDomainTick = function(callback) {\n    var args;\n    args = Array.prototype.slice.call(arguments);\n    args[0] = wrap_callback(callback, 'process.nextDomainTick');\n    return __nextDomainTick.apply(this, args);\n  };\n\n  _setTimeout = global.setTimeout;\n\n  _setInterval = global.setInterval;\n\n  global.setTimeout = function(callback) {\n    var args;\n    args = Array.prototype.slice.call(arguments);\n    args[0] = wrap_callback(callback, 'global.setTimeout');\n    return _setTimeout.apply(this, args);\n  };\n\n  global.setInterval = function(callback) {\n    var args;\n    args = Array.prototype.slice.call(arguments);\n    args[0] = wrap_callback(callback, 'global.setInterval');\n    return _setInterval.apply(this, args);\n  };\n\n  if (global.setImmediate != null) {\n    _setImmediate = global.setImmediate;\n    global.setImmediate = function(callback) {\n      var args;\n      args = Array.prototype.slice.call(arguments);\n      args[0] = wrap_callback(callback, 'global.setImmediate');\n      return _setImmediate.apply(this, args);\n    };\n  }\n\n  Error.prepareStackTrace = prepareStackTrace;\n\n  if (process.env.NODE_ENV === 'production') {\n    console.warn('NOTICE: Longjohn is known to cause CPU usage due to its extensive data collection during runtime.\\nIt generally should not be used in production applications.');\n  }\n\n}).call(this);\n"}